{"/home/travis/build/npmtest/node-npmtest-adventure/test.js":"/* istanbul instrument in package npmtest_adventure */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-adventure/lib.npmtest_adventure.js":"/* istanbul instrument in package npmtest_adventure */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_adventure = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_adventure = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-adventure/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-adventure && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_adventure */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_adventure\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_adventure.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_adventure.rollup.js'] =\n            local.assetsDict['/assets.npmtest_adventure.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_adventure.__dirname + '/lib.npmtest_adventure.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-adventure/node_modules/adventure/index.js":"var inherits = require('inherits');\nvar EventEmitter = require('events').EventEmitter;\nvar mkdirp = require('mkdirp');\nvar fs = require('fs');\nvar path = require('path');\nvar x256 = require('x256');\nvar through = require('through2');\nvar split = require('split');\nvar minimist = require('minimist');\n\nvar showMenu = require('./lib/menu.js');\nvar showHelp = require('./lib/help.js');\n\nmodule.exports = Shop;\ninherits(Shop, EventEmitter);\n\nfunction Shop (opts) {\n    if (!(this instanceof Shop)) return new Shop(opts);\n    if (!opts) opts = {};\n    if (typeof opts === 'string') opts = { name: opts };\n    \n    this.name = opts.name;\n    this.options = opts;\n    \n    if (!this.name) return this._error(\n        'Your adventure must have a name! '\n        + 'Supply an `opts.name` to adventure().'\n    );\n    this.command = opts.command || commandify(this.name);\n    \n    this.datadir = opts.datadir || path.resolve(\n        process.env.HOME || process.env.USERPROFILE,\n        '.config/' + this.name\n    );\n    mkdirp.sync(this.datadir);\n    \n    this.files = {\n        completed: path.join(this.datadir, 'completed.json'),\n        current: path.join(this.datadir, 'current.json')\n    };\n    this.state = { \n        completed: [],\n        current: null\n    };\n    \n    try { this.state.completed = require(this.files.completed) }\n    catch (err) {}\n    \n    try { this.state.current = require(this.files.current) }\n    catch (err) {}\n    \n    this.colors = opts.colors || {};\n    var c = {\n        pass: [0,255,0],\n        fail: [255,0,0],\n        info: [0,255,255]\n    };\n    var colors = Object.keys(c).reduce(function (acc, key) {\n        acc[key] = '\\x1b[38;5;' + x256(c[key]) + 'm';\n        return acc;\n    }, {});\n    \n    if (!this.colors.pass) this.colors.pass = colors.pass;\n    if (!this.colors.fail) this.colors.fail = colors.fail;\n    if (!this.colors.info) this.colors.info = colors.info;\n    this.colors.reset = '\\x1b[00m';\n    \n    this._adventures = [];\n}\n\nShop.prototype.execute = function (args) {\n    var cmd = args[0];\n    var argv = minimist(args, { alias: { h: 'help' } });\n    \n    if (cmd === 'verify') {\n        this.verify(args.slice(1), this.state.current);\n    }\n    else if (cmd === 'run') {\n        this.run(args.slice(1), this.state.current);\n    }\n    else if (cmd === 'help' || argv.help) {\n        showHelp({ command: this.command });\n    }\n    else if (cmd === 'selected') {\n        console.log(this.state.current);\n    }\n    else if (cmd === 'list') {\n        console.log(this._adventures\n            .map(function (adv) { return adv.name })\n            .join('\\n')\n        );\n    }\n    else if (cmd === 'completed') {\n        console.log(this.state.completed.join('\\n'));\n    }\n    else if (cmd === 'select') {\n        this.select(args[1]);\n    }\n    else if (cmd === 'print') {\n        this.select(this.state.current);\n    }\n    else if (cmd === 'next' || cmd === 'prev') {\n        var names = this._adventures\n            .map(function (adv) { return adv.name })\n        ;\n        var ix = names.indexOf(this.state.current);\n        if (cmd === 'next') ix ++\n        else if (cmd === 'prev') ix --\n        if (names[ix]) this.select(names[ix])\n    }\n    else if (cmd === 'solution') {\n        var adv = this.find(this.state.current);\n        if (!adv) {\n            return console.log(\n                'No adventure is currently selected. '\n                + 'Select an adventure from the menu.'\n            );\n            process.exit(1);\n        }\n        var p = adv.fn();\n        if (p.solution) this._show(p.solution);\n        else console.log('No reference solution available for this adventure.')\n    }\n    else if (cmd === 'reset') {\n        this.state.completed = [];\n        this.save('completed');\n        this.state.current = null;\n        this.save('current');\n    }\n    else if (!cmd || cmd === 'menu') {\n        this.showMenu(this.options);\n    }\n    else {\n        console.log('unrecognized command: ' + cmd);\n    }\n};\n\nShop.prototype.add = function (name, fn) {\n    this._adventures.push({ name: name, fn: fn });\n};\n\nShop.prototype.find = function (name) {\n    for (var i = 0; i < this._adventures.length; i++) {\n        var adv = this._adventures[i];\n        if (norm(adv.name) === norm(name)) return adv;\n    }\n    function norm (s) { return String(s).replace(/\\W/g, '').toLowerCase() }\n};\n\nShop.prototype.verify = function (args, name) {\n    var self = this;\n    var adv = this.find(name);\n    if (!adv) return this._error(\n        'No adventure is currently selected. '\n        + 'Select an adventure from the menu.'\n    );\n    var p = adv.fn();\n    if (!p.verify) return this._error(\n        \"This problem doesn't have a .verify function yet!\"\n    );\n    if (typeof p.verify !== 'function') return this._error(\n        'This p.verify is a ' + typeof p.verify\n        + '. It should be a function instead.'\n    );\n    \n    var s = p.verify(args, function (ok) {\n        if (ok) self.pass(name, p)\n        else self.fail(name, p)\n    });\n    if (s) this._show(s);\n};\n\nShop.prototype.run = function (args, name) {\n    var self = this;\n    var adv = this.find(name);\n    if (!adv) return this._error(\n        'No adventure is currently selected. '\n        + 'Select an adventure from the menu.'\n    );\n    var p = adv.fn();\n    if (!p.run) return this._error(\n        \"This problem doesn't have a .run function.\"\n    );\n    if (typeof p.run !== 'function') return this._error(\n        'This p.run is a ' + typeof p.run\n        + '. It should be a function instead.'\n    );\n    var s = p.run(args);\n    if (s) this._show(s);\n};\n\nShop.prototype.pass = function (name, p) {\n    var ix = this.state.completed.indexOf(name);\n    if (ix < 0) this.state.completed.push(name);\n    this.save('completed');\n    \n    if (p.pass) {\n        this._show(p.pass);\n        console.log();\n    }\n    else {\n        console.log(\n            '\\n' + this.colors.pass\n            + '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'\n        );\n        console.log(\n            '@@@' + this.colors.reset\n            + '     YOUR SOLUTION IS CORRECT'\n            + this.colors.pass + '!     @@@'\n        );\n        console.log('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');\n        console.log(this.colors.reset + '\\n');\n    }\n    if (p.solution) this._show(p.solution);\n    \n    this.emit('pass', name);\n    if (this.state.completed.length === this._adventures.length) {\n        this.emit('finished');\n    }\n};\n\nShop.prototype.fail = function (name, p) {\n    if (p.fail) {\n        this._show(p.fail);\n        console.log();\n    }\n    else {\n        console.log(\n            this.colors.fail\n            + '#########################################'\n        );\n        console.log(\n            '###' + this.colors.reset\n            + '   YOUR SOLUTION IS NOT CORRECT!'\n            + this.colors.fail + '   ###'\n        );\n        console.log('#########################################');\n        console.log(this.colors.reset + '\\n');\n    }\n    this.emit('fail', name);\n};\n\nShop.prototype.select = function (name) {\n    var adv = this.find(name);\n    this.state.current = name;\n    this.save('current');\n    \n    var p = adv.fn();\n    if (!p.problem) {\n        p.problem = this.colors.info + Array(67).join('!') + '\\n'\n            + '!!!' + this.colors.reset\n            + ' This adventure does not have a .problem description yet! '\n            + this.colors.info + ' !!!\\n!!!' + this.colors.reset\n            + ' Set .problem to a string, buffer, stream or function that'\n            + this.colors.info + ' !!!\\n!!!' + this.colors.reset\n            + ' returns a string, buffer, or stream.                     '\n            + this.colors.info + ' !!!\\n' + Array(67).join('!') + '\\n'\n        ;\n    }\n    if (p.problem) this._show(p.problem);\n};\n\nShop.prototype.showMenu = function (opts) {\n    var self = this;\n    if (!opts) opts = {};\n    \n    var menu = showMenu({\n        fg: opts.fg,\n        bg: opts.bg,\n        autoclose: typeof opts.autoclose === 'boolean' ? opts.autoclose : true,\n        command: this.command,\n        title: opts.title || this.name.toUpperCase(),\n        names: this._adventures.map(function (x) { return x.name }),\n        completed: this.state.completed\n    });\n    menu.on('select', function (name) {\n        console.log();\n        self.select(name);\n    });\n    menu.on('exit', function () {\n        menu.close();\n        console.log();\n    });\n    return menu;\n};\n\nShop.prototype.save = function (key) {\n    fs.writeFile(this.files[key], JSON.stringify(this.state[key]));\n};\n\nShop.prototype._error = function (msg) {\n    console.error('ERROR: ' + msg);\n    process.exit(1);\n};\n\nShop.prototype._show = function (m) {\n    var self = this;\n    if (typeof m === 'object' && m.pipe) {\n        m.pipe(split()).pipe(through(write)).pipe(process.stdout);\n    }\n    else if (typeof m === 'function') {\n        this._show(m());\n    }\n    else console.log(replace(m));\n    \n    function write (buf, enc, next) {\n        this.push(replace(buf) + '\\n');\n        next();\n    }\n    function replace (s) {\n        if (typeof s !== 'string') s = String(s);\n        return s\n            .replace(/\\$ADVENTURE_COMMAND/g, self.command)\n            .replace(/\\$ADVENTURE_NAME/g, self.name)\n        ;\n    }\n}\n\nfunction commandify (s) {\n    return String(s).toLowerCase().replace(/\\s+/g, '-');\n}\n","/home/travis/build/npmtest/node-npmtest-adventure/node_modules/adventure/lib/menu.js":"var tmenu = require('terminal-menu');\nvar path = require('path');\nvar EventEmitter = require('events').EventEmitter;\nvar showHelp = require('./help.js');\n\nmodule.exports = function (opts) {\n    var emitter = new EventEmitter;\n    \n    var menu = tmenu({\n      width: 65,\n      x: 3, y: 2, \n      bg: opts.bg || 'blue',\n      fg: opts.fg || 'white'\n    });\n    \n    menu.reset();\n    \n    var title = opts.title || 'UNTITLED\\n';\n    menu.write(title + '\\n');\n    menu.write(Array(title.length+1).join('-') + '\\n');\n    \n    (opts.names || []).forEach(function (name) {\n        var isDone = (opts.completed || []).indexOf(name) >= 0;\n        if (isDone) {\n            var m = '[COMPLETED]';\n            menu.add(\n                name\n                + Array(65 - m.length - name.length + 1).join(' ')\n                + m\n            );\n        }\n        else menu.add(name);\n    });\n    menu.write('-----------------\\n');\n    menu.add('HELP');\n    menu.add('EXIT');\n    \n    menu.on('select', function (label) {\n        var name = label.replace(/\\s{2}.*/, '');\n        \n        menu.close();\n        if (name === 'EXIT') {\n            return emitter.emit('exit');\n        }\n        else if (name === 'HELP') {\n            console.log();\n            showHelp(opts);\n        }\n        else emitter.emit('select', name);\n    });\n    process.stdin.setRawMode(true);\n    process.stdin.pipe(menu.createStream()).pipe(process.stdout);\n    menu.once('close', function () {\n        process.stdin.setRawMode(false);\n        if (opts.autoclose) {\n            process.stdin.end();\n        }\n    });\n    emitter.close = function () { menu.close() };\n    \n    return emitter;\n};\n","/home/travis/build/npmtest/node-npmtest-adventure/node_modules/adventure/lib/help.js":"var fs = require('fs');\nvar split = require('split');\nvar through = require('through2');\n\nmodule.exports = function (opts) { \n    fs.createReadStream(__dirname + '/usage.txt')\n        .pipe(through(function (buf, enc, next) {\n            var line = buf.toString('utf8')\n                .replace(/\\$COMMAND/g, opts.command)\n            ;\n            this.push(line + '\\n');\n            next();\n        }))\n        .pipe(process.stdout)\n    ;\n};\n"}